@page "/login"
@inject IFirebaseAuthStateProvider account
@inject IUserService userService
@rendermode InteractiveServer

@* <h3>Login</h3>

<div class="login-container">
    <EditForm Model="@user">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="user.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="user.Password" type="password" class="form-control" />
        </div>

        <div class="button-group">
            <button @onclick="HandleLogin" class="btn btn-primary">Login</button>
            <button @onclick="Logout" class="btn btn-secondary">Logout</button>
        </div>
    </EditForm>
</div> *@

<RadzenStack Gap="0" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 400px; overflow: hidden;">
    <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" class="rz-color-white rz-mb-0">Login</RadzenText>
    </RadzenCard>
    <RadzenCard class="rz-shadow-0 rz-p-12">
        <RadzenTemplateForm Data=@user>
            <RadzenFieldset Text="Sign in">
                <RadzenTextBox Label="Email" @bind-Value="user.Email" Style="width: 100%;" />
                <RadzenTextBox Label="Password" @bind-Value="user.Password" Type="password" Style="width: 100%;" />
            </RadzenFieldset>
            <RadzenButton Text="Login" Click="@OnLogin" ButtonStyle="ButtonStyle.Primary" Style="width: 100%;" />
        </RadzenTemplateForm>
    </RadzenCard>
</RadzenStack>




@if (_authenticated)
{
    <p>Authenticated</p>
}
else
{
    <p>Not Authenticated</p>
}

@code {

    public bool _authenticated = false;

    private UserDTO user = new();

    async Task OnLogin()
    {
        var uId = await account.LoginAsync(user.Email, user.Password);
        // Add authentication logic here

        if (uId == null)
        {
            return;
        }

        var userDTO = await userService.GetByIdAsync(uId);

        var testing = new UserDTO
            {
                Id = userDTO.Id,
                Password = userDTO.Password,
                Email = userDTO.Email,
                BudgetsId = new List<string>(),
                TransactionIds = new List<string>()
            };

        user = testing;

        Console.WriteLine(testing);
        await LocateAutenticationState();
        Navigation.NavigateTo("/login");

    }

    void OnRegister(string name)
    {
        //test
    }

    async Task onLogout()
    {
        await account.LogoutAsync();
        await LocateAutenticationState();
    }













    private async Task HandleLogin()
    {
        var uId = await account.LoginAsync(user.Email, user.Password);
        // Add authentication logic here

        if(uId == null){
			return;
        }

        var userDTO = await userService.GetByIdAsync(uId);

        var testing = new UserDTO
            {
                Id = userDTO.Id,
                Password = userDTO.Password,
                Email = userDTO.Email,
                BudgetsId = new List<string>(),
                TransactionIds = new List<string>()
            };

        user = testing;

        Console.WriteLine(testing);
        await LocateAutenticationState();

		Navigation.NavigateTo("/");
    }

    private async Task LocateAutenticationState()
    {
        var authKey = await account.CheckAuthenticatedAsync();
        if (authKey)
        {
            // Update the _authenticated status based on the auth state
            _authenticated = true;
        }
        else
        {
            _authenticated = false;
        }

        // Notify Blazor about the state change
        StateHasChanged();
    }

    private async Task Logout()
    {
        await account.LogoutAsync();
        await LocateAutenticationState();
    }

    [Inject] NavigationManager Navigation { get; set; } = default!;
}
