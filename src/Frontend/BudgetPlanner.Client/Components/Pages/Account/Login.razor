@* @page "/login"
@rendermode InteractiveServer
@inject IAccountManagement account
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager

@code {
    private string _spinnerClass = "";
    private SignInDTO _signInDtoModel = new();
    private string[] _errors = [];

    private async Task LoginUser()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        // // var result = await account.LoginAsync(_signInDtoModel.Email, _signInDtoModel.Password);
        // if (result != null)
        // {
        //     await localStorage.SetItemAsync("authToken", result.Id); //korrigera till token typ
        //     navigationManager.NavigateTo("/");
        // }
        // else
        // {
        //     _spinnerClass = "";
        //     _errors = new string[] { "Invalid email or password" };
        // }

    }
} *@

@page "/login"
@inject IAccountManagement account
@inject IUserService userService
@rendermode InteractiveServer

<h3>Login</h3>

<div class="login-container">
    <EditForm Model="@user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="user.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="user.Password" type="password" class="form-control" />
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">Login</button>
            <button @onclick="Logout" class="btn btn-secondary">Logout</button>
        </div>
    </EditForm>
</div>

@if (_authenticated)
{
    <p>Authenticated</p>
}

@code {
    private UserDTO user = new();

    public bool _authenticated = false;


    private async Task HandleLogin()
    {
        var uId = await account.LoginAsync(user.Email, user.Password);
        // Add authentication logic here

        var userDTO = await userService.GetByIdAsync(uId);

        var testing = new UserDTO
            {
                Id = userDTO.Id,
                Password = userDTO.Password,
                Email = userDTO.Email,
                BudgetsId = new List<string>(),
                TransactionIds = new List<string>()
            };

        user = testing;

        Console.WriteLine(testing);
        await LocateAutenticationState();
    }

    private async Task LocateAutenticationState()
    {
        var authKey = await  account.CheckAuthenticatedAsync();
        if (authKey != null && authKey)
        {
            _authenticated = authKey;
        }
    }

    private async void Logout()
    {
        await account.LogoutAsync();
        await LocateAutenticationState();
    }

    [Inject] NavigationManager Navigation { get; set; } = default!;
}
